#!/bin/bash
# test init
GRUPO="$(pwd -P)" # Obtengo el directorio del script
cd $GRUPO
DIRCONF="$GRUPO"/dirconf # Directorio del archivo de configuracion
DIRBIN="$GRUPO"
DIRMAE="$GRUPO"/mae
DIRREC="$GRUPO"/nov
DIROK="$GRUPO"/ok
DIRPROC="$GRUPO"/imp/proc
DIRINFO="$GRUPO"/rep
DIRLOG="$GRUPO"/log
DIRNOK="$GRUPO"/nok

VAR_INITEP="true"
#test end

# $1: Mensaje a loguear ; $2: Tipo del mensaje
function log {
  echo "$1" "$2"
  #$DIRBIN/LOGEP PROCEP "$1" "$2"
}

seguir=true
trap ctrl_c INT

function ctrl_c {
	echo "Finalizando..."
	seguir=false
}

function loop {
	log "Cantidad de archivos a procesar: $(ls -l $DIROK| wc -l)" "WAR"
	while ( $seguir )
	do
		for archivo in $(ls $DIROK)
		do
			archivo_valido="true"
			# Validar que no esté dentro de los procesados
			if [ -f "$DIRPROC/$archivo" ] ; then
		    log "Archivo Duplicado. Se rechaza el archivo $archivo"
				archivo_valido="false"	
			fi

			#A efectos de este TP, bastara con verificar el primer registro para determinar si el formato es
            #correcto.
            #Si la cantidad de campos del primer registro no se corresponde con el formato establecido, asumir
            #que el archivo está dañado, rechazar el archivo completo y grabar en el log un mensaje aclaratorio,
            #como ser:
            #Estructura inesperada. Se rechaza el archivo <nombre del archivo>.
            #El archivo rechazado se lo mueve a DIRNOK empleando la función Movep.

            linea=$(head -n 1 $DIROK/$archivo)

            IFS=';' read -ra valores <<< "$linea"
#
#            echo ${valores[0]}

            # Iteración de registros dentro de cada archivo
			# 1) Validar formato correcto del archivo (Primer registro)
			# 1a) Incorrecto: ./MOVEP $DIRREC/$archivo $DIRNOK PROCEP
			# 1b) Correcto: -> Grabar en log: Archivo a procesar <nombre del archivo>.

            if [ ${valores[0]} != "ID_EJE" ] || [ ${valores[1]} != "FECHA_EJE" ] || [ ${valores[2]} != "COD_CEN_EJE" ] ||
                [ ${valores[3]} != "NOM_ACT_EJE" ] || [ ${valores[4]} !=  "NOM_TRI_EJE" ] || [ ${valores[5]} != "GASTO_EJE" ]; then
			    log "Estructura inesperada. Se rechaza el archivo $archivo."
			    ./MOVEP $DIROK/$archivo $DIRNOK PROCEP
            else
                log "Archivo a procesar: $archivo"
                leidos=0
                rechazados=0
                aceptados=0
                while IFS='' read -r linea || [[ -n "$linea" ]]; do
                    echo "Text read from file: $linea"
                    registro_valido=true
                    formato_valido=true
                    IFS=';' read -ra valores <<< "$linea"
                    # 2) Validar los campos

                    #Validación Centro de Presupuesto: El centro de presupuesto debe existir en el maestro de centros
                    encontrado=false
                    while IFS='' read -r centros || [[ -n "$centros" ]]; do
                        IFS=';' read -ra centro <<< "$centros"
                        if [ "${valores[2]}" == "${centro[0]}" ]; then
                            echo "encontrado centro: ${centro[0]}"
                            encontrado=true
                            break
                        fi
                    done < "$DIRMAE/centros.csv"

                    if [ "$encontrado" = false ]; then
                        registro_valido=false
                        echo "no encontre centro: ${valores[2]}"
                    fi


                    #Validación de Actividad: La actividad debe existir en el maestro de actividades

                    encontrado=false
                    while IFS='' read -r actividades || [[ -n "$actividades" ]]; do
                        IFS=';' read -ra actividad <<< "$actividades"
                        if [ "${valores[3]}" == "${actividad[3]}" ]; then
                            echo "encontrada actividad: ${valores[3]}"
                            encontrado=true
                            break
                        fi
                    done < "$DIRMAE/actividades.csv"

                    if [ "$encontrado" = false ]; then
                        registro_valido=false
                        echo "no encontre actividad: ${valores[3]}"
                    fi
                    #Validación Trimestre: El trimestre debe existir en la tabla de trimestres y el trimestre debe ser del año
                    #presupuestario corriente

                    encontrado=false
                    while IFS='' read -r trimestres || [[ -n "$trimestres" ]]; do
                        IFS=';' read -ra trimestre <<< "$trimestres"
                        if [ "${valores[4]}" == "${trimestre[1]}" ]; then
                            echo "encontrado trimestre: ${valores[4]}"
                            encontrado=true

                            #Validación de Fecha: la fecha indicada en el registro debe ser una fecha valida;
                            fecha=${valores[1]}
                            # Regex compleja. Lo que hago es convertir el formato de aaaammdd a mm/dd/aaaa para poder validar con date
                            formato_pedido=$(echo $fecha} | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\2\/\3\/\1/')
                            date "+%m/%d/%Y" -d $formato_pedido > /dev/null  2>&1
                            valida=$?
                            if [ "$valida" = true ]; then
                                formato_valido=false
                                echo "Fecha formato invalida: $fecha"
                                break
                            fi
#                            desde=$(echo ${valores[2]} | sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)/\3\2\1/')
#                            hasta=$(echo ${valores[3]} | sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)/\3\2\1/')
                            desde=${valores[2]}
                            hasta=${valores[3]}
                            if [ "$fecha" \< "$desde" ] || [ "$fecha" = "$hasta" ] || [ "$fecha" \> "$hasta" ]; then
                                formato_valido=false
                                echo "Fecha desde o hasta invalida: $fecha"
                                break
                            fi
                            hoy=$(date "+%Y%m%d")
                            if [ $fecha \> $hoy ]; then
                                formato_valido=false
                                echo "Fecha hoy invalida: $fecha"
                                break
                            fi
                            # menor o igual a la
                            #fecha del nombre del archivo y estar comprendida entre la fecha de inicio del trimestre
                            #(FDESDE_TRI) y la fecha de fin del trimestre (FHASTA_TRI)

                            break
                        fi
                    done < "$DIRMAE/trimestres.csv"

                    if [ "$encontrado" = false ]; then
                        echo "no encontre trimestre: ${valores[4]}"
                        registro_valido=false
                    fi

                    if [ "$formato_valido" = false ]; then
                        echo "Fecha invalida: ${valores[1]}"
                        registro_valido=false
                    fi

                    #Validación de Gasto: el importe de gasto debe ser mayor a cero.
                    gasto="${valores[5]}" | bc -l
                    echo "gasto: $gasto"
                    if [ gasto < 0 ]; then
                        registro_valido=false
                    fi



                done < "$DIROK/$archivo"
            fi







			# 3) Resultado de REGISTRO
			# 3a) Grabar registro aceptado en DIRPROC/ejecutado-<año presupuestario>
			# 3b) Grabar registro rechazado en DIRPROC/rechazado-<año presupuestario>

			# Fin iteración

			# 4) Totalizar
			# 4a) Registros leidos
			# 4b) Registros rechazados
			# 4a) Registros aceptados

		done
		seguir=false
	done
}

# Cuerpo principal

# Verificar si el ambiente ya fue inicializado
if [ -z "$VAR_INITEP" ] ; then
	echo "El ambiente no fue inicializado. Para iniciar ejecute INITEP nuevamente."
else
	loop
fi