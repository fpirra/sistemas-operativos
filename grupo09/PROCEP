#!/bin/bash
# test init
GRUPO="$(pwd -P)" # Obtengo el directorio del script
cd $GRUPO
DIRCONF="$GRUPO"/dirconf # Directorio del archivo de configuracion
DIRBIN="$GRUPO"
DIRMAE="$GRUPO"/mae
DIRREC="$GRUPO"/nov
DIROK="$GRUPO"/ok
DIRPROC="$GRUPO"/imp
DIRINFO="$GRUPO"/rep
DIRLOG="$GRUPO"/log
DIRNOK="$GRUPO"/nok

VAR_INITEP="true"
#test end

# $1: Mensaje a loguear ; $2: Tipo del mensaje
function log {
  echo "$1" "$2"
  #$DIRBIN/LOGEP PROCEP "$1" "$2"
}

seguir=true
trap ctrl_c INT

function ctrl_c {
	echo "Finalizando..."
	seguir=false
}

function loop {
	log "Cantidad de archivos a procesar: $(ls -l $DIROK| wc -l)" "WAR"
	while ( $seguir )
	do
		for archivo in $(ls $DIROK)
		do
			# Validar que no esté dentro de los procesados
			if [ -f "$DIRPROC/proc/$archivo" ] ; then
		    	log "Archivo Duplicado. Se rechaza el archivo $archivo"
				continue	
			fi

			# Verificación del primer registro para asegurar formato de archivo correcto
            encabezado_valido="ID_EJE;FECHA_EJE;COD_CEN_EJE;NOM_ACT_EJE;NOM_TRI_EJE;GASTO_EJE"			
            encabezado=$(head -n 1 $DIROK/$archivo)
			if [ "$encabezado" != "$encabezado_valido" ] ; then
		    	log "Estructura inesperada. Se rechaza el archivo $archivo."
			    ./MOVEP $DIROK/$archivo $DIRNOK PROCEP
			    continue	
			fi

            # El archivo es válido, procesar los registros

            log "Archivo a procesar: $archivo"
            leidos=0
            rechazados=0
            aceptados=0
            while IFS='' read -r linea || [[ -n "$linea" ]]; do
                # echo $linea
                registro_valido=true
                IFS=';' read -ra valores <<< "$linea"

                # Validar los campos de cada registro

                razon=""

                # Validación Centro de Presupuesto: El centro de presupuesto debe existir en el maestro de centros
                encontrado=false
                while IFS='' read -r centros || [[ -n "$centros" ]]; do
                    IFS=';' read -ra centro <<< "$centros"
                    if [ "${valores[2]}" == "${centro[0]}" ]; then
                        encontrado=true
                        break
                    fi
                done < "$DIRMAE/centros.csv"

                if [ "$encontrado" = false ]; then
                    registro_valido=false
                    razon="$razon No encontre centro: ${valores[2]}."
                fi

                # Validación de Actividad: La actividad debe existir en el maestro de actividades
                encontrado=false
                while IFS='' read -r actividades || [[ -n "$actividades" ]]; do
                    IFS=';' read -ra actividad <<< "$actividades"
                    if [ "${valores[3]}" == "${actividad[3]}" ]; then
                        encontrado=true
                        break
                    fi
                done < "$DIRMAE/actividades.csv"

                if [ "$encontrado" = false ]; then
                    registro_valido=false
                    razon="$razon No encontre actividad: ${valores[3]}."
                fi
                
                #Validación Trimestre: El trimestre debe existir en la tabla de trimestres y el trimestre debe ser del año
                #presupuestario corriente
                encontrado=false
                while IFS='' read -r trimestres || [[ -n "$trimestres" ]]; do
                    IFS=';' read -ra trimestre <<< "$trimestres"
                    if [ "${valores[4]}" == "${trimestre[1]}" ]; then
                        encontrado=true

                        #Validación de Fecha: la fecha indicada en el registro debe ser una fecha valida;
                        fecha=${valores[1]}
                        # Regex compleja. Lo que hago es convertir el formato de aaaammdd a mm/dd/aaaa para poder validar con date
                        formato_pedido=$(echo $fecha} | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\2\/\3\/\1/')
                        date "+%m/%d/%Y" -d $formato_pedido > /dev/null  2>&1
                        valida=$?
                        if [ "$valida" = true ]; then
                            formato_valido=false
                            echo "Fecha formato invalida: $fecha"
                            break
                        fi
						#desde=$(echo ${valores[2]} | sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)/\3\2\1/')
						#hasta=$(echo ${valores[3]} | sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{4\}\)/\3\2\1/')
                        desde=${valores[2]}
                        hasta=${valores[3]}
                        if [ "$fecha" \< "$desde" ] || [ "$fecha" = "$hasta" ] || [ "$fecha" \> "$hasta" ]; then
                            formato_valido=false
                            break
                        fi
                        hoy=$(date "+%Y%m%d")
                        if [ $fecha \> $hoy ]; then
                            formato_valido=false
                            break
                        fi
                        break
                    fi
                done < "$DIRMAE/trimestres.csv"

                if [ "$encontrado" = false ]; then
                    razon="$razon No encontre trimestre: ${valores[4]}."
                    registro_valido=false
                fi

                if [ "$formato_valido" = false ]; then
                    razon="$razon Fecha invalida: ${valores[1]}"
                    registro_valido=false
                fi

            	
				# Resultado de REGISTRO
            	((leidos++))
            	if [ "$registro_valido" = true ]; then
    				# 3a) Grabar registro aceptado en DIRPROC/ejecutado-<año presupuestario>
                	((aceptados++))
                else
                	# 3b) Grabar registro rechazado en DIRPROC/rechazado-<año presupuestario>
                	((rechazados++))
                	echo $razon
                fi
            done < "$DIROK/$archivo"
        	
        	# Mover archivo a procesados
            #./MOVEP $DIROK/$archivo $DIRPROC/proc PROCEP

            log "Para el archivo $archivo se totalizó:" "INFO"
        	log "Cantidad de registros leidos: $leidos" "INFO"
        	log "Cantidad de registros aceptados: $aceptados" "INFO"
        	log "Cantidad de registros rechazados: $rechazados" "INFO"

			# Fin iteración

		done
		seguir=false
	done
}

# Cuerpo principal

# Verificar si el ambiente ya fue inicializado
if [ -z "$VAR_INITEP" ] ; then
	echo "El ambiente no fue inicializado. Para iniciar ejecute INITEP nuevamente."
else
	loop
fi