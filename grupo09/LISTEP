#!/usr/bin/perl
use warnings;
use strict;
use Scalar::Util qw(looks_like_number);


my %comparacion_trimestre = ("PrimerTrimestre", "1", "SegundoTrimestre", "2", "TercerTrimestre", "3", "CuartoTrimestre", "4", "Sumatotal", "5");

sub mostrar_menu {
  print "Menú de ayuda \n";
  print "    Requeridos:\n";
  print "     -a - Año\n";
  print "         Para la obtencion del presupuesto sancionado Sancionados: \n";
  print "           -ct - Listar los registros ordenados por código de centro y luego por trimestre\n";
  print "           -tc - Listar los registros ordenados por trimestre y luego por código de centro\n";
  print "         Para la obtención de los presupuestos ejecutados: \n";
  print "            -e - Listar el presupuesto ejecutado para un año presupuestario\n";
  print "               Opcionales para el campo: (Solo uno)\n";
  print "                   -p Permite el filtro por una o mas provincias por nombre\n";
  print "                   -p nombre_provincia;..;..\n";
  print "               Ejemplo: ./LISTEP -e -p CABA;Buenos Aires;Formosa \n";
  print "         Para la obtención del archivo control: \n";
  print "           -st - Obtiene el saldo por trimestre y acumulado por año\n";
  print "               Opcionales para el campo: (Solo uno)\n";
  print "                  Filtrado por centro \n";
  print "                  -c centro;..;.. \n";
  print "                  Filtrado por trimestre \n";
  print "                  -t trimestre \n";
  print "               Ejemplo: ./LISTEP -st -c 0.0.0.1-2-1 \n";
  print "               Ejemplo: ./LISTEP -st -r 0.0.0.1-* \n";
  print "               Ejemplo: ./LISTEP -st -t Primer Trimestre 2016 \n";
  print "    Opcionales:\n";
  print "       -i - imprimir\n";
}

sub inicializar_rutas_de_directorio {

  my %rutas_de_directorios = ();

  my $archivo_de_configuracion = '../dirconf/INSTALEP.conf';
  open(MANEJADOR, '<:encoding(UTF-8)', $archivo_de_configuracion)
    or die "No se pudo abrir el archivo de configuración '$archivo_de_configuracion'  $!";

  while (my $fila = <MANEJADOR>) {
    chomp $fila;
    my @segmento = split /=/, $fila;
    $rutas_de_directorios{$segmento[0]} = $segmento[1];
  }

  close(MANEJADOR);

  return %rutas_de_directorios;

}

sub extracion_anio {

  (my $string) = @_;

  $string =~ s/ //g;

  (my $anio) = $string =~ m/([0-9]+)/g;

  return $anio;

}

sub carga_de_archivos {

  (my $archivo) = @_;

  open(MANEJADOR, '<:encoding(UTF-8)', $archivo)
    or die "No se pudo abrir el archivo $archivo $!";

  my @archivo_en_memoria;

  #Evito los el principio de archivo
  my $fila = <MANEJADOR>;

  while ($fila = <MANEJADOR>) {
    chomp $fila;
    my @segmento = split /;/, $fila;
    push (@archivo_en_memoria, \@segmento);
  }

  close(MANEJADOR);

  return @archivo_en_memoria;
}

sub comparacion_trimestre {
  (my $trimestre) = @_;

  $trimestre =~ s/ //g;

  (my $trimestre_nombre) = $trimestre =~ m/([a-zA-Z]+)/g;

  my $valor_trimestre = $comparacion_trimestre{$trimestre_nombre};

  my $anio = &extracion_anio($trimestre);

  return $anio.$valor_trimestre;
}

sub comparacion_centro {
  (my $centro) = @_;

  $centro =~ s/\.|-//g;

  if( !looks_like_number($centro) ){
    return 0;
  }

  return $centro;
}

sub remover_comas_por_puntos {
  (my $string) = @_;

  $string =~ s/,/./g;

  return $string;
}



sub ct {

  (my @presupuesto_sancionado) = @_;

  my %suma_totales = ();

  foreach my $row (@presupuesto_sancionado) {

    if ( !(exists $suma_totales{$row->[0]}) ) {
      $suma_totales{$row->[0]} = 0;
    }

    $suma_totales{$row->[0]} = $suma_totales{$row->[0]} + &remover_comas_por_puntos($row->[2]) + &remover_comas_por_puntos($row->[3]);

    $row->[2] = &remover_comas_por_puntos($row->[2]) + &remover_comas_por_puntos($row->[3]);

    delete $row->[3];
  }

  my @llaves = keys %suma_totales;

  my $suma_total = 0;

  my $suma_total_string = "Suma total ".&extracion_anio($presupuesto_sancionado[0]->[1]);

  foreach my $llave (@llaves) {

    my @segmento = ($llave, $suma_total_string, $suma_totales{$llave});

    $suma_total += $suma_totales{$llave};

    push @presupuesto_sancionado, \@segmento;
  }

  @presupuesto_sancionado = sort {
      &comparacion_centro($a->[0]) <=> &comparacion_centro($b->[0])
      ||
      &comparacion_trimestre($a->[1]) <=> &comparacion_trimestre($b->[1])
    } @presupuesto_sancionado;

  my @segmento = ($suma_total_string, $suma_total);

  push @presupuesto_sancionado, \@segmento;

  return @presupuesto_sancionado;
}

sub escribir_archivo {
  (my $nombre_archvo, my $ruta, my @texto_a_escribir) = @_;

  open(MANEJADOR, '>:encoding(UTF-8)', $ruta.$nombre_archvo)
    or die "No se pudo abrir el archivo para la grabacion '$ruta.$nombre_archvo'  $!";


    foreach my $row (@texto_a_escribir)
    {
      print MANEJADOR join(";",@$row) . "\n";
    }

    close(MANEJADOR);
}


sub tc {

    (my @presupuesto_sancionado) = @_;

    my %suma_totales = ();

    foreach my $row (@presupuesto_sancionado) {

      if ( !(exists $suma_totales{$row->[1]}) ) {
        $suma_totales{$row->[1]} = 0;
      }

      $suma_totales{$row->[1]} = $suma_totales{$row->[1]} + &remover_comas_por_puntos($row->[2]) + &remover_comas_por_puntos($row->[3]);

      $row->[2] = &remover_comas_por_puntos($row->[2]) + &remover_comas_por_puntos($row->[3]);

      delete $row->[3];
    }

    my @llaves = keys %suma_totales;

    my $suma_total = 0;

    my $suma_total_string = "Suma total ".&extracion_anio($presupuesto_sancionado[0]->[1]);

    foreach my $llave (@llaves) {

      my @segmento = ($suma_total_string, $llave, $suma_totales{$llave});

      $suma_total += $suma_totales{$llave};

      push @presupuesto_sancionado, \@segmento;
    }

    @presupuesto_sancionado = sort {
        &comparacion_trimestre($a->[1]) <=> &comparacion_trimestre($b->[1])
        ||
        &comparacion_centro($a->[0]) <=> &comparacion_centro($b->[0])
      } @presupuesto_sancionado;

    my @segmento = ($suma_total_string, $suma_total);

    push @presupuesto_sancionado, \@segmento;

    foreach my $row (@presupuesto_sancionado)
    {
      print join(";",@$row) . "\n";
    }

    return @presupuesto_sancionado;
}

sub imprimir_resultado {

  my @resultado = @_;

  foreach my $row (@resultado)
  {
    print join(";",@$row) . "\n";
  }

}

sub listar_archivos {

 ( my $directorio, my $restriccion_nombre_archvo ) = @_;

  my @lista_de_archivos;

  if ( opendir( MANEJADOR , $directorio ) ) {

  @lista_de_archivos = readdir( MANEJADOR );

  closedir( MANEJADOR );

  }

  my @listado;

  foreach my $archivo ( @lista_de_archivos ) {
    next if ($archivo eq "." || $archivo eq "..");

    if ( -r "$directorio/$archivo" && $archivo =~ m/$restriccion_nombre_archvo/ ) {
      push @listado, "$directorio/$archivo";
    }
  }

  return @listado;
}

sub dividir_por_provincias {
  (my @listado_archivos) = @_;

  my %division_por_provincias;

  foreach my $archivo (@listado_archivos) {

    (my $provincia) = $archivo =~ m/ejecutado.+/g;

    $provincia = substr $provincia, 15, 2;

    ($provincia) = $provincia =~ m/^[0-9]+/g;

    if( ! exists $division_por_provincias{$provincia} ) {
      @{$division_por_provincias{$provincia}} = ();
    }

    push (@{$division_por_provincias{$provincia}}, $archivo);
  }

  return %division_por_provincias;

}

sub obtener_codigo_actividad {
  (my $nombre, my @archivo_actividades)= @_;

  foreach my $row (@archivo_actividades) {
    if( $nombre eq $row->[3] ) {
      return $row->[0];
    }
  }
}

sub verificar_codigo_actividad_centro {
  ( my $codigo_actividad, my $codigo_centro, my @archivo_axc) = @_;

  foreach my $row (@archivo_axc) {
    if( $codigo_actividad eq $row->[0] && $codigo_centro eq $row->[1] ) {
      return 1;
    }
  }
  return 0;
}

sub encontrar_nombre_provincia {
  (my $codigo_provincia, my @archivo_provincias) = @_;

  foreach my $row (@archivo_provincias) {
    if( $codigo_provincia eq $row->[0] ) {
      return $row->[1];
    }
  }
}

sub encontrar_nombre_centro {
  (my $codigo_centro, my @archivo_centro) = @_;

  foreach my $row (@archivo_centro) {
    if( $codigo_centro eq $row->[0] ) {
      return $row->[1];
    }
  }
}

sub listado_presupuesto_ejecutado {

  (my $archivos_ejecutados_provincias, my $centros, my $provincias, my $actividades, my $axc) = @_;

  my %archivos_ejecutados_provincias = %{ $archivos_ejecutados_provincias };
  my @centros = @{ $centros };
  my @provincias = @{ $provincias };
  my @actividades = @{ $actividades };
  my @axc = @{ $axc };

  my @archivo_de_resultados;


  foreach my $codigo_provincia (keys(%archivos_ejecutados_provincias)) {
    my $nombre_provincia = encontrar_nombre_provincia($codigo_provincia, @provincias);

    my $gasto_total = 0;


    foreach my $archivo (@{$archivos_ejecutados_provincias{$codigo_provincia}}) {
      my @archivo_en_memoria = carga_de_archivos($archivo);

      foreach my $row (@archivo_en_memoria) {
        push @{$row}, $nombre_provincia;

        my $codigo_actividad = obtener_codigo_actividad($row->[3], @actividades);

        if( &verificar_codigo_actividad_centro($codigo_actividad ,$row->[2], @axc) ){
          push @{$row}, "";
        }
        else {
          push @{$row}, "Gasto fuera de la planificacion";
        }

        push @archivo_de_resultados, \@{$row};

        $gasto_total += remover_comas_por_puntos($row->[5]);

      }
    }

    my @informe = ("Total gastos $nombre_provincia", $gasto_total);

    push @archivo_de_resultados, \@informe;

  }

  return @archivo_de_resultados;

}

sub obtener_saldo_trimestre_centro {

  (my $codigo_centro, my $trimestre, my @archivo_saldo) = @_;
  foreach my $row (@archivo_saldo) {
    if( $codigo_centro eq $row->[0] && $trimestre eq $row->[1]) {
      return remover_comas_por_puntos($row->[2]) + remover_comas_por_puntos($row->[3]);
    }
  }
}


sub listado_control_presupuesto_ejecutado {
  (my $archivo_de_resultados, my $archivo_sancionado) = @_;

  my @archivo_de_resultados = @{$archivo_de_resultados};
  my @archivo_sancionado = @{$archivo_sancionado};

  my @archivo_de_resultados_control_presupuesto = ();

  foreach my $row (@archivo_de_resultados) {
    if( $row->[0] =~ m/Total gastos/g ){
    }
    else {
      push @archivo_de_resultados_control_presupuesto, $row;
    }
  }

  @archivo_de_resultados_control_presupuesto = sort {
      &comparacion_centro($a->[2]) <=> &comparacion_centro($b->[2])
      ||
      &comparacion_trimestre($a->[4]) <=> &comparacion_trimestre($b->[4])
      ||
      $a->[1] <=> $b->[1]
    } @archivo_de_resultados_control_presupuesto;

    my @archivo_de_resultados_control_presupuesto_procesado = ();

    my $codigo_centro;
    my $trimestre;
    my $saldo_trimestre;
    my $saldo_acumulado;

    foreach my $row (@archivo_de_resultados_control_presupuesto) {

      if( $codigo_centro ne $row->[2] ){
        $codigo_centro = $row->[2];
        $trimestre = $row->[4];
        $saldo_trimestre = &obtener_saldo_trimestre_centro($codigo_centro, $trimestre, @archivo_sancionado);
        $saldo_acumulado = $saldo_trimestre;
        my @encabezado = ($codigo_centro,$trimestre, $saldo_trimestre, $saldo_acumulado);
        push @archivo_de_resultados_control_presupuesto_procesado, \@encabezado;
      }
      if( $codigo_centro eq $row->[2] && $trimestre ne $row->[4] ){
        $trimestre = $row->[4];
        $saldo_trimestre = &obtener_saldo_trimestre_centro($codigo_centro, $trimestre, @archivo_sancionado);
        $saldo_acumulado += $saldo_trimestre;
        my @encabezado = ($codigo_centro,$trimestre, $saldo_trimestre, $saldo_acumulado);
        push @archivo_de_resultados_control_presupuesto_procesado, \@encabezado;
      }

      $saldo_trimestre -= remover_comas_por_puntos($row->[5]);

      $saldo_acumulado -= remover_comas_por_puntos($row->[5]);

      if( $saldo_trimestre lt 0 ){
        $row->[7] = $row->[7]." Presupuesto Excedido";
      }

      push $row, $saldo_trimestre;
      push $row, $saldo_acumulado;

      push @archivo_de_resultados_control_presupuesto_procesado, $row;
    }
    imprimir_resultado(@archivo_de_resultados_control_presupuesto_procesado);
}


sub filtrar {
  (my $archivo_de_resultados, my $ingresos_usuario, my $posicion ) = @_;

  my @archivo_de_resultados = @{$archivo_de_resultados};
  my @ingresos_usuario = @{$ingresos_usuario};

  my @archivo_de_resultados_filtrado;

  for my $row (@archivo_de_resultados) {
    if( $row->[$posicion] ~~ @ingresos_usuario ) {
      push @archivo_de_resultados_filtrado, $row;
    }
  }

  return @archivo_de_resultados_filtrado;
}

sub filtrar_rango {
  (my $archivo_de_resultados, my $ingreso_usuario, my $posicion ) = @_;

  my @archivo_de_resultados = @{$archivo_de_resultados};

  my @archivo_de_resultados_filtrado;

  my $valor_a_comparar;

  for my $row (@archivo_de_resultados) {
    $valor_a_comparar = substr($row->[$posicion],0, length($ingreso_usuario));
    if( $valor_a_comparar eq $ingreso_usuario ) {
      push @archivo_de_resultados_filtrado, $row;
    }
  }

  return @archivo_de_resultados_filtrado;
}

sub separar_ingreso_usuario {
  (my $ingreso_usuario) = @_;

  return split(';', $ingreso_usuario);
}

sub encontrar_posicion_valor_de_comando {
  my(my $comando, my @array) = @_;

  my $index = 1;
  foreach my $entrada (@array) {
    if( $comando eq $entrada ){
      return $index++;
    }
    $index++;
  }
}

sub main {

  my $imprimir = 0;

  if ( "-help" ~~ @ARGV || scalar(@ARGV) eq 0) {
    &mostrar_menu;
    return;
  }
  elsif ( "-i" ~~ @ARGV ) {
    $imprimir = 1;
  }

  my $anio = $ARGV[encontrar_posicion_valor_de_comando('-a', @ARGV)];

  print $anio;
  print "\n";
  print "\n";
  print "\n";

  if( !looks_like_number($anio) ){
    print "Año incorrecto\n";
    return 0;
  }

  my $comienzo_nombre_archivos_ejecutados = "ejecutado_$anio";
  my $nombre_presupuesto_sancionado = "/sancionado-$anio.csv";

  my %rutas_de_directorios = &inicializar_rutas_de_directorio;
  my @archivos_ejecutados = &listar_archivos($rutas_de_directorios{"DIRPROC"}."/proc", $comienzo_nombre_archivos_ejecutados);
  my %archivos_ejecutados_provincias = &dividir_por_provincias(@archivos_ejecutados);
  my @presupuesto_sancionado = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}.$nombre_presupuesto_sancionado);
  my @provincias = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}."/provincias.csv");
  my @centros = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}."/centros.csv");
  my @trimestres = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}."/trimestres.csv");
  my @actividades = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}."/actividades.csv");
  my @axc = &carga_de_archivos($rutas_de_directorios{"DIRMAE"}."/tabla-AxC.csv");

  my @archivo_de_resultados = listado_presupuesto_ejecutado(
    \%archivos_ejecutados_provincias,
    \@centros,
    \@provincias,
    \@actividades,
    \@axc
    );


  my @archivo_a_imprimir;

  if ( "-ct" ~~ @ARGV ) {
    @archivo_a_imprimir = &ct(@presupuesto_sancionado);
  }
  elsif ( "-tc" ~~ @ARGV ) {
    @archivo_a_imprimir = &tc(@presupuesto_sancionado);
  }
  elsif ( "-e" ~~ @ARGV ) {
    @archivo_a_imprimir = @archivo_de_resultados;
    if( '-p' ~~ @ARGV ){
      my @ingresos_usuario = &separar_ingreso_usuario($ARGV[&encontrar_posicion_valor_de_comando('-p', @ARGV)]);
      @archivo_a_imprimir = &filtrar(\@archivo_a_imprimir, \@ingresos_usuario, 6);
    }
  }
  elsif ( "-st"  ~~ @ARGV ) {
    if( '-c' ~~ @ARGV ){
      my @ingresos_usuario = &separar_ingreso_usuario($ARGV[&encontrar_posicion_valor_de_comando('-st', @ARGV)]);
      @archivo_de_resultados = &filtrar(\@archivo_de_resultados, \@ingresos_usuario, 2);
    }
    elsif( '-r'  ~~ @ARGV ){
      my $ingresos_usuario = substr($ARGV[&encontrar_posicion_valor_de_comando('-r', @ARGV)],0, length($ARGV[&encontrar_posicion_valor_de_comando('-p', @ARGV)])-1);
      @archivo_de_resultados = &filtrar_rango(\@archivo_de_resultados, $ingresos_usuario, 2);
    }
    elsif( '-t'  ~~ @ARGV ){
      my @ingresos_usuario = &separar_ingreso_usuario($ARGV[&encontrar_posicion_valor_de_comando('-t', @ARGV)]);
      @archivo_de_resultados = &filtrar(\@archivo_de_resultados, \@ingresos_usuario, 4);
    }
    @archivo_a_imprimir = &listado_control_presupuesto_ejecutado(\@archivo_de_resultados, \@presupuesto_sancionado);
  }

  imprimir_resultado(@archivo_a_imprimir);

  if ( $imprimir eq 1 ) {
    &escribir_archivo("out.csv","../../",@archivo_a_imprimir);
  }

}

&main;
